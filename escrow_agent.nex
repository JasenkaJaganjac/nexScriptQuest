pragma nexscript ^0.1.0;

/*
This smart contract allows secure transactions between two parties by using 
an escrow agent. The escrow agent holds the funds until the predefined
conditions are met. If the conditions are met, the funds are released to the
seller; if not, they are returned to the buyer. 

This contract is designed for use cases where trust is required between 
parties who may not know each other, with an added timeout mechanism to prevent 
funds from being locked indefinitely.

*/


contract SimpleEscrow(pubkey buyer, pubkey seller, pubkey escrowAgent, uint256 deadline) {


    // Releases funds to the seller when conditions are met and the deadline has not passed
    function releaseToSeller(sig escrowAgentSig){
        require(tx.time < deadline, "Transaction deadline has passed");
        require(checkSig(escrowAgentSig, escrowAgent), "Invalid escrow agent signature");
        transfer(seller);
    }
    
    // Returns funds to the buyer if conditions are not met or the deadline has passed
    function refundToBuyer(sig escrowAgentSig) {
        require(checkSig(escrowAgentSig, escrowAgent), "Invalid escrow agent signature");
        require(tx.time >= deadline, "Deadline has not passed yet");
        transfer(buyer);
    }
}
